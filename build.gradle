buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://gregtech.overminddl1.com"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://jitpack.io"
        }
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.github.CDAGaming:ForgeGradle:1c670759c5'
        classpath "gradle.plugin.net.minecrell:licenser:0.3"
    }
}

apply plugin: "forge"
apply plugin: "net.minecrell.licenser"

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

idea {
    module {
        inheritOutputDirs = true
	}
}

group = config.group_name
version = config.mod_version
archivesBaseName = "${config.mod_id}-${config.minecraft_version}"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run/assets"
	
	replaceIn "FoamFixCoreContainer.java"
	replace "@VERSION@", "${config.mod_version}"
}

// add some stuff to the version
version = "${config.mod_version}"

processResources {
    // replace stuff in the files we want.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replaces
        expand ([
            'mod_version': version,
            'minecraft_version': project.config.minecraft_version,
            'build_number': project.config.build_number,
        ])
    }

    // copy everything else, thats we didnt do before
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

license {
    sourceSets = [project.sourceSets.main]
    header = project.file("docs/LICENSE")
    ignoreFailures = true
    exclude '**/*.info'
    exclude '**/*.mcmeta'
}

sourceSets {
    main {
        resources {
            srcDirs += 'docs'
        }
    }
}

// change the name of my obfuscated jar
jar {
    appendix = 'universal'
    manifest {
        attributes 'FMLCorePlugin': 'pl.asie.foamfix.coremod.FoamFixCore'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

// add a source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    appendix = 'src'
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = 'deobf'
}

artifacts {
    archives sourceJar
    archives deobfJar
}
